package ${package.Controller};

import java.util.List;
import java.io.IOException;
import javax.servlet.http.HttpServletResponse;
import com.skkj.common.core.utils.SecurityUtils;
import io.swagger.annotations.Api;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.skkj.common.security.annotation.PreAuthorize;
import com.skkj.common.core.web.controller.BaseController;
import com.skkj.common.core.web.domain.AjaxResult;
import com.skkj.common.core.utils.poi.ExcelUtil;
import ${package.Entity}.${entity};
import ${package.Service}.${table.serviceName};
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import com.skkj.common.core.web.page.TableDataInfo;

/**
 * @author ${author}
 * @since ${date}
 */
#if(${swagger})
@Api(tags = "${table.controllerName}")
#end
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("/${table.businessName}")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    @Autowired
    private ${table.serviceName} ${table.entityNameLow}Service;

    /**
     * 查询列表vice
     */
    @PreAuthorize(hasPermi = "${table.permissionPrefix}:list")
    @GetMapping("/list")
    public TableDataInfo list(${table.entityName} ${table.entityNameLow}) {
        startPage();
        List<${table.entityName}> list = ${table.entityNameLow}Service.select${table.entityName}List(${table.entityNameLow});
        return getDataTable(list);
    }

    /**
     * 导出列表
     */
    @PreAuthorize(hasPermi = "${table.permissionPrefix}:export")
    @PostMapping("/export")
    public void export(HttpServletResponse response, ${table.entityName} ${table.entityNameLow}) throws IOException {
        List<${table.entityName}> list = ${table.entityNameLow}Service.select${table.entityName}List(${table.entityNameLow});
        ExcelUtil<${table.entityName}> util = new ExcelUtil<${table.entityName}>(${table.entityName}.class);
        util.exportExcel(response, list, "${table.businessName}");
    }

    /**
     * 获取详细信息
     */
    @PreAuthorize(hasPermi = "${table.permissionPrefix}:query")
    @GetMapping(value = "/get/{${table.pkField}s}")
    public AjaxResult getInfo(@PathVariable("${table.pkField}s") ${pkType}[] ${table.pkField}s) {
        return AjaxResult.success(${table.entityNameLow}Service.select${table.entityName}ByIds(${table.pkField}s));
    }

    /**
     * 新增
     */
    @PreAuthorize(hasPermi = "${table.permissionPrefix}:add")
    @PostMapping("/add")
    public AjaxResult add(@RequestBody ${table.entityName} ${table.entityNameLow}) {
        ${table.entityNameLow}.setCreateBy(String.valueOf(SecurityUtils.getUserId()));
        ${table.entityNameLow}.setUpdateBy(String.valueOf(SecurityUtils.getUserId()));
        return toAjax(${table.entityNameLow}Service.insert${table.entityName}(${table.entityNameLow}));
    }

    /**
     * 修改
     */
    @PreAuthorize(hasPermi = "${table.permissionPrefix}:edit")
    @PutMapping("/edit")
    public AjaxResult edit(@RequestBody ${table.entityName} ${table.entityNameLow}) {
        ${table.entityNameLow}.setUpdateBy(String.valueOf(SecurityUtils.getUserId()));
        return toAjax(${table.entityNameLow}Service.update${table.entityName}(${table.entityNameLow}));
    }

    /**
     * 删除
     */
    @PreAuthorize(hasPermi = "${table.permissionPrefix}:remove")
    @DeleteMapping("/delete/{${table.pkField}s}")
    public AjaxResult remove(@PathVariable ${pkType}[] ${table.pkField}s) {
        return toAjax(${table.entityNameLow}Service.delete${table.entityName}ByIds(${table.pkField}s));
    }

    /**
    * 删除
    */
    @PreAuthorize(hasPermi = "${table.permissionPrefix}:remove")
    @DeleteMapping("/delete")
    public AjaxResult remove(@RequestBody ${table.entityName} ${table.entityNameLow}) {
        return toAjax(${table.entityNameLow}Service.delete${table.entityName}(${table.entityNameLow}));
    }
}

#end